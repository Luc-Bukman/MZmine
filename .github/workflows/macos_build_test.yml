name: macOS Test Build

on:
  push:
    branches: [ macos_signing ]
    paths-ignore:
      - 'src/main/resources/mzmineversion.properties'
  pull_request:
    branches: [ macos_signing ]

jobs:
  gradle_build:
    name: test and build
    strategy:
      matrix:
        os: [ macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19.0.1'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle build
        run: |
          echo "$MACOS_DEVELOPER_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p abc123 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p abc123 build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_DEVELOPER_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k abc123 build.keychain
          ./gradlew --stacktrace --info
        env:
          MACOS_DEVELOPER_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_CERTIFICATE }}
          MACOS_DEVELOPER_CERTIFICATE_PWD: ${{ secrets.MACOS_DEVELOPER_CERTIFICATE_PWD }}
          MACOS_APPLE_ID_PWD: ${{ secrets.MACOS_APPLE_ID_PWD }}
          MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
          MACOS_APP_IDENTITY_TEAM_ID: ${{ secrets.MACOS_APP_IDENTITY_TEAM_ID }}

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: matrix.os == 'windows-latest'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Windows_portable.zip
      - name: Zip portable linux
        if: matrix.os == 'ubuntu-latest'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_msi_installer
          path: build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_portable
          path: build/jpackage/MZmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_deb_package
          path: build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_rpm_package
          path: build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_portable
          path: build/jpackage/MZmine_Linux_portable.zip
          retention-days: 7  # store for 7 days

      # for macOS:
      # 1. upload the dmg installer
      # 2. remove the dmg isntaller from path
      # 3. zip and upload the jpackage directory
      # This is needed because zipping of the /jpackage/MZmine.app portable version zips the content
      # of the folder not the folder itself
      - name: Upload builds macos
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_dmg_installer
          path: build/jpackage/*.dmg
          retention-days: 7  # store for 7 days

#      - name: Remove dmg File and Make .app executable
#        if: matrix.os == 'macos-latest'
#        run: |
#          find ./build/jpackage/ -name '*.dmg' -delete
#          chmod a+x build/jpackage/MZmine.app/Contents/MacOS/MZmine
#
#      - name: Zip portable macos
#        if: matrix.os == 'macos-latest'
#        uses: papeloto/action-zip@v1
#        with:
#          files: build/jpackage/
#          dest: build/jpackage/MZmine_macOS_portable.zip
      - name: Upload macos portable builds
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_portable
          path: build/jpackage/MZmine_macOS_portable.zip
          retention-days: 7  # store for 7 days

